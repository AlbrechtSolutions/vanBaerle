@inherits RazorTemplateBase<RazorTemplateModel<Template>>
@using Dynamicweb.Rendering;

@{
    Dynamicweb.Ecommerce.International.CountryCollection countries = Dynamicweb.Ecommerce.International.Country.GetCountries();
    Dynamicweb.Ecommerce.International.CountryCollection regions = Dynamicweb.Ecommerce.International.Country.GetRegions(countries.First().Code2);
    bool userIsLoggedIn = Dynamicweb.Security.UserManagement.User.IsExtranetUserLoggedIn();
    string urlEdit = GetString("UserManagement:User.EditUrl");
    string editLogin = urlEdit + "&login=1";
    string editProfile = urlEdit + "&profile=1";
    string errorMessages = "";

    if(countries.Any()){
    @: @SnippetStart("jsVariables") var countryRegions = {}; @SnippetEnd("jsVariables")
    foreach(var country in countries){
      Dynamicweb.Ecommerce.International.CountryCollection tempRegions = Dynamicweb.Ecommerce.International.Country.GetRegions(country.Code2);
      if(tempRegions.Any()){
      @: @SnippetStart("jsVariables") countryRegions.@(country.Code2) = {}; @SnippetEnd("jsVariables")
        <text>
          @SnippetStart("jsVariables")
            countryRegions.@(country.Code2).code = [];
            countryRegions.@(country.Code2).name = [];
          @SnippetEnd("jsVariables")
        </text>
        foreach(var region in tempRegions){
          <text>
            @SnippetStart("jsVariables")
              countryRegions["@country.Code2"].code.push("@region.RegionCode");
              countryRegions["@country.Code2"].name.push("@region.CountryText.Name");
            @SnippetEnd("jsVariables")
          </text>
        }
      }
    }
  }

  foreach (LoopItem validationError in GetLoop("FormValidationErrors")){
    errorMessages += validationError.GetString("UserManagement:User.FormValidationError.Message");
  }
}

@GetString("UserManagement:User.FormStart").Replace("<form", "<form class=\"userRelatedForms DMForms col-xs-12\"")
  @* @SnippetStart("password")
  @Fieldset("TextInput mandatory confirmation", "UserManagement_Form_NewPassword", @Translate("newPassword","New Password"), @GetString("UserManagement:User.NewPassword.Input"))
  <fieldset class="fieldInfoContainer"><span>@Translate("passwordRulesMessage","1) Password must contain numbers, upper and lower case letters and special characters  </br> 2) Must contain at least 8 characters")</span></fieldset>
  @Fieldset("TextInput mandatory confirmation", "UserManagement_Form_NewPasswordConfirm", @Translate("confirmPassword","Confirm Password"), @GetString("UserManagement:User.NewPasswordConfirm.Input"))
  @SnippetEnd("password") *@

  @if(System.Web.HttpContext.Current.Request.QueryString["login"] == null){

    <input name="UserManagement_Form_EmailAllowed_ApplyValue" type="hidden" id="UserManagement_Form_EmailAllowed_ApplyValue" value="AllowEmail" />
     @Fieldset("TextInput mandatory", "UserManagement_Form_OldPassword", @Translate("oldPassword","Old Password"), @GetString("UserManagement:User.OldPassword.Input"))
    @Fieldset("TextInput mandatory confirmation", "UserManagement_Form_NewPassword", @Translate("newPassword","New Password"), @GetString("UserManagement:User.NewPassword.Input"))
	<fieldset class="fieldInfoContainer"><span>@Translate("passwordRulesMessage","1) Password must contain numbers, upper and lower case letters and special characters  </br> 2) Must contain at least 8 characters")</span></fieldset>
	@Fieldset("TextInput mandatory confirmation", "UserManagement_Form_NewPasswordConfirm", @Translate("confirmPassword","Confirm Password"), @GetString("UserManagement:User.NewPasswordConfirm.Input"))
    

  }

  <fieldset class="hidden">
    @foreach(var i in GetLoop("SelectableGroups")){
      @i.GetString("UserManagement:User.SelectableGroup.Input").Replace("<input ", "<input checked ")
    }
  </fieldset>

  <div class="formButtonsWithReset">
    <input type="submit" class="btn btn-bg" value='@Translate("changePassword", "Change Password")'>
  </div>
@GetString("UserManagement:User.FormEnd")

<div style="display:hidden">
  
</div>

@SnippetStart("jsOnLoad")
onLoadCreateUser({
  str_country : '@GetString("UserManagement:User.Country")',
  str_state : '@GetString("UserManagement:User.State")',
  errorMessage : '@errorMessages'
});
@SnippetEnd("jsOnLoad")

@helper Fieldset(string className, string labelFor, string labelText, string input) {
  <fieldset class="@className">
    <label for="@labelFor">@labelText</label>
    @input
  </fieldset>
}