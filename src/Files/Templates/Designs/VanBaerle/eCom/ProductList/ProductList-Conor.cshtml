@inherits RazorTemplateBase<RazorTemplateModel<Template>>
@using Dynamicweb.Rendering;
@using Dynamicweb;
@using Dynamicweb.Frontend;
@Include("../../includes/Razor/GetImage.cshtml")
@Include("../../includes/Razor/VerifyImage.cshtml")
@{
  Dynamicweb.Content.Items.Item item = Pageview.Area.Item;
  bool isLoggedIn = Dynamicweb.Security.UserManagement.User.IsExtranetUserLoggedIn();
  bool isFrontEnd = Dynamicweb.Environment.ExecutingContext.IsFrontEnd();
  var request = System.Web.HttpContext.Current.Request.Params;
  List<LoopItem> prodLoop = GetLoop("Products");
  int totalPagesNum = GetInteger("Ecom:ProductList.TotalPages");
  int curPage = !string.IsNullOrEmpty(request["PageNum"]) ? Convert.ToInt32(request["PageNum"].ToString()) : 1;
  bool noResults = false;
  bool showQuantity = item["ShowQuantityField"].ToString() == "True" ? true : false;
  string currentPageId = Pageview.Page.ID.ToString();
  string imagesFolder = "/Files/Files/" + designName + "/Products/";
  string totalPages = GetString("Ecom:ProductList.TotalPages");
  string nextPage = GetString("Ecom:ProductList.NextPage");
  string pagingHref = "";
  string sortBy = !string.IsNullOrEmpty(request["sortby"]) ? request["sortby"] : "";
  string sortOrder = !string.IsNullOrEmpty(request["SortOrder"]) ? request["SortOrder"] : "";
  string minPrice = prodLoop.OrderBy(s => s.GetDouble("Ecom:Product.Price.Price")).First().GetString("Ecom:Product.Price.Price");
  string maxPrice = prodLoop.OrderByDescending(s => s.GetDouble("Ecom:Product.Price.Price")).First().GetString("Ecom:Product.Price.Price");
  string qString = !string.IsNullOrEmpty(request["q"]) ? request["q"] : "";
  string dataView = System.Web.HttpContext.Current.Request.Cookies["dataList"] != null ? System.Web.HttpContext.Current.Request.Cookies["dataList"].Value : "";
  string groupsIds = !string.IsNullOrEmpty(System.Web.HttpContext.Current.Request.Params["groupid"]) ? System.Web.HttpContext.Current.Request.Params["groupid"] : "";
}
<section class="container contentTop">
  @* FILTERS *@
  <div id="filtersContainer" class="col-xs-12 col-sm-3 noPaddingLeft">
    @Include("includes/Filters.cshtml")
  </div>
  <div id="listContainer" class="col-xs-12 col-sm-9 noPaddingRight" data-amountrequired='@Translate("amountIsRequired","Amount is required.")'>
    @* SORT AND ORDER *@
    <div class="col-xs-12 noPadding">
      <span class="col-sm-2 col-xs-12 noPaddingLeft">@prodLoop.Count() @Translate(GetInteger("Ecom:ProductList.PageProdCnt") > 1 ? "products" : "product") found</span>
    </div>
    @if (qString != "")
  {
  <form action="/Default.aspx" id="searchFormList">
    <input type="hidden" name="ID" value="@(item["SearchResults"])">
    <fieldset class="TextInput mandatory">
      <label for="searchSubmitList" class="hide">@Translate("search", "Search")</label>
      <input id="searchSubmitList" data-error='@Translate("searchText", "Search for something")' type="text" name="q" value="@qString">
    </fieldset>
    <button type="submit">
      <i class="fa fa-search"></i>
    </button>
  </form>
  }

    <!-- REMOVE FILTERS -->
    <div class="col-xs-12 removeFiltersContainer">
      @foreach (LoopItem facetGroup in GetLoop("FacetGroups"))
    {
      foreach (LoopItem facet in facetGroup.GetLoop("Facets"))
      {
        if (facet.GetLoop("FacetOptions").Any(r => r.GetBoolean("FacetOption.Selected")))
        {
    <a data-queryname="@(facet.GetString("Facet.QueryParameter"))" class="btn btn-bg" href="#">@facet.GetString("Facet.Name") <i class="fa fa-times"></i></a>
        }
      }
    }
      <a class="removeAll" href="#">@Translate("removeall", "Remove all filters")</a>
    </div>

    <ul data-maxcompare='@Translate("maxCompare", "Maximum to compare: 3")' data-list="@dataView" id="productsList" class="productsList ">
      @foreach (LoopItem product in prodLoop)
    {
      bool isGiftCard = product.GetInteger("Ecom:Product.Type") == 3;
      string productNumber = product.GetString("Ecom:Product.Number");
      string imagePattern = imagesFolder + productNumber + ".jpg";
      string image = GetImagePathUrl(product.GetString("Ecom:Product.ImageSmall.Clean"), product.GetString("Ecom:Product.ImageMedium.Clean"), product.GetString("Ecom:Product.ImageLarge.Clean"), imagePattern);
      string productName = product.GetString("Ecom:Product.Name");
      string productID = product.GetString("Ecom:Product.ID");
      string productVariantID = product.GetString("Ecom:Product.VariantID");
      string productShortDescription = product.GetString("Ecom:Product.LongDescription");
      string link = product.GetString("Ecom:Product.LinkGroup.Clean");

      string ecoRating = product.GetString("Ecom:Product:Field.EcoRating");
      string phValue = product.GetString("Ecom:Product:Field.pHValue");
                                        
      string productLanguage = product.GetString("Ecom:Product.LanguageID");
      string variantDefaultId = product.GetString("Ecom:Product.DefaultVariantComboID");
      string variantCurrentId = product.GetString("Ecom:Product.VariantID");
      string variantId = (!string.IsNullOrEmpty(variantCurrentId)) ? variantCurrentId : variantDefaultId;
      string compareLink = productID + "$" + productLanguage + "$" + productVariantID;
      bool productIsFavoriteBool = product.GetBoolean("Ecom:Product.IsProductInFavoriteList");
      string productRemoveFromList = "/Default.aspx?Id=" + currentPageId + "&amp;ProductID=" + productID + "&amp;CCRemoveFromMyLists=" + productID + "&amp;CCRemoveFromListVariantID=" + variantDefaultId + "&amp;CCRemoveFromListLanguageID=" + productLanguage;
      string productAddToList = "/Default.aspx?Id=" + currentPageId + "&amp;ProductID=" + productID + "&amp;CCAddToMyLists=" + productID + "&amp;CCAddToListVariantID=" + variantDefaultId + "&amp;CCAddToListLanguageID=" + productLanguage;
      string favoriteUrl = productIsFavoriteBool ? productRemoveFromList : productAddToList;
      string miniCartPage = (item["MiniCart"] ?? "").ToString();
      List<LoopItem> variantCombinations = product.GetLoop("VariantCombinations");

    @* Logic: If there is any variant check if there is any selected/default variant to load the price if not load price from first (by order xpto) variant.  *@
      int productStock = !variantCombinations.Any() ? product.GetInteger("Ecom:Product.AvailableAmount") : variantCombinations.FirstOrDefault(x => x.GetString("Ecom:Product.DefaultVariantComboID").Equals(x.GetString("Ecom:VariantCombination.VariantID"))) == null ? variantCombinations.OrderBy(x => x.GetString("Ecom:VariantCombination.VariantID")).FirstOrDefault().GetInteger("Ecom:Product.AvailableAmount") : variantCombinations.FirstOrDefault(x => x.GetString("Ecom:Product.DefaultVariantComboID").Equals(x.GetString("Ecom:VariantCombination.VariantID"))).GetInteger("Ecom:Product.AvailableAmount");
      string productPrice = !variantCombinations.Any() ? product.GetString("Ecom:Product.Price") : variantCombinations.FirstOrDefault(x => x.GetString("Ecom:Product.DefaultVariantComboID").Equals(x.GetString("Ecom:VariantCombination.VariantID"))) == null ? variantCombinations.OrderBy(x => x.GetString("Ecom:VariantCombination.VariantID")).FirstOrDefault().GetString("Ecom:Product.Price") : variantCombinations.FirstOrDefault(x => x.GetString("Ecom:Product.DefaultVariantComboID").Equals(x.GetString("Ecom:VariantCombination.VariantID"))).GetString("Ecom:Product.Price");
      string stockStatus = productStock > 0 ? "fa-check" : "fa-close";

    <li class="col-xs-12 noPadding border">
      <div class="col-xs-12 noPadding">
        <figure class="col-xs-3 noPadding">
          <a href="@link">
            <img src="@GetImage(image, 400, 0)" alt="@productName" title="@productName" class="img-responsive" />
          </a>
        </figure>

        <div class="col-xs-9 noPadding-right">
          <div class="col-xs-8">
            <h2 class="productName">
              <a itemprop="name" href="@link">@productName</a>
            </h2>
            @if (!string.IsNullOrEmpty(productShortDescription))
              {
              <div class="tileHide shortDescription">
                @productShortDescription
              </div>
              }

              <div class="viewMore">
                <a href="@link">
                  @Translate("viewMore", "View More >")
                </a>
              </div>

          </div>

          <div class="col-xs-4 noPaddingRight pull-right priceContainer">
            <div class="ecoRating ecoRating@(ecoRating)">@ecoRating</div>
            <div class="phValue">
              <label>@Translate("phValue", "pH-Wert")</label>
              <div>@phValue</div>
            </div>
          </div>

        </div>
      </div>
    </li>
    }
    </ul>

    <div class="footerBox hidden col-xs-12">
      <span class="col-xs-6 noPadding">@prodLoop.Count() @Translate("of", "of") @GetString("Ecom:ProductList.PageProdCnt") @Translate(GetInteger("Ecom:ProductList.PageProdCnt") > 1 ? "items" : "item")</span>
      @if (GetInteger("Ecom:ProductList.TotalPages") > 1)
    {
      string active = "";
      string prevPage = GetString("Ecom:ProductList.PrevPage.Clean");
      string nextListPage = GetString("Ecom:ProductList.NextPage.Clean");
      string pageText = "&laquo; " + Translate("previous", "Previous") + " ";
      string requestUrl = Pageview.GlobalTags.GetTagByName("Global:Request.Url").Value.ToString();

    <ul class="pagination">
      @if (prevPage != "")
        {
        @PageItem("class=\"previous\"", prevPage, pageText)
        }
      @if (curPage > 2 && totalPagesNum > 3)
        {
          for (int i = 1; i <= 1; i++)
          {
            active = curPage == i ? "class=\"active\"" : "";
            pagingHref = requestUrl.Contains("PageNum") ? requestUrl.Replace("PageNum=" + curPage, "PageNum=" + i) : requestUrl + "&PageNum=" + i;
        @PageItem(active, pagingHref, i.ToString())
          }
        @Ellipsis()
        }
      @foreach (LoopItem page in GetLoop("Ecom:ProductList.Pages3"))
        {
          string hrefEncoded = page.GetString("Ecom:ProductList.Pages3.Page.UrlHtmlEncoded");
          string page3Number = page.GetString("Ecom:ProductList.Pages3.Page.Number");

          if (page.GetBoolean("Ecom:ProductList.Pages3.Page.IsCurrent"))
          {
        @PageItem("class=\"active\"", hrefEncoded, page3Number)
          }
          else
          {
        @PageItem("", hrefEncoded, page3Number)
          }
        }
      @if (curPage < totalPagesNum - 1 && totalPagesNum > 3)
        {
        @Ellipsis()
          for (int i = totalPagesNum; i <= totalPagesNum; i++)
          {
            active = curPage == i ? "class=\"active\"" : "";
            pagingHref = requestUrl.Contains("PageNum") ? requestUrl.Replace("PageNum=" + curPage, "PageNum=" + i) : requestUrl + "&PageNum=" + i;
        @PageItem(active, pagingHref, i.ToString())
          }
        }
      @if (nextListPage != "")
        {
          string nextText = Translate("next", "Next") + "&raquo;";

        @PageItem("class=\"next\"", nextListPage, nextText, "data-numPages=\"" + totalPagesNum + "\"")
        }
    </ul>
    }
    </div>
  </div>

</section>
@SnippetStart("jsOnLoad")
onLoadProductList("@minPrice.Replace(",", "")", "@maxPrice.Replace(",", "")", "@price", "@groupsIds");
@SnippetEnd("jsOnLoad")

@helper PageItem(string cssClass, string href, string text, string dataAttr = "")
{
  <li @cssClass @dataAttr>
    <a href="@href">@text</a>
  </li>
}
@helper Ellipsis()
{
  <li><span>...</span></li>
}