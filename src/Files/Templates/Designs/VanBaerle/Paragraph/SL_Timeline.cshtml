@inherits RazorTemplateBase<RazorTemplateModel<Template>>
@using Dynamicweb.Rendering;
@* version 1.3 *@
@Include("/Files/Templates/Designs/LayoutFunctions.cshtml")

@{
  string noBackground = GetBoolean("Item.No_Background")? "no-bg" : "";

}

@NewRow()

<article class='@GetColumnClass() slides @noBackground @GetString("Item.Custom_CSS")'>

    @RenderParagraphAnchor()
    @RenderHeading()
    @RenderImage()
    @RenderText()
    @RenderModule()
    @RenderButton()
    @EndParagraphWrapper()


    <div class="event-display-list section__slider">



      @foreach(LoopItem list in GetLoop("Item.List").Cast<LoopItem>().Reverse()) {
        string listID = list.GetString("Item.List.Id"),
               listImage = list.GetString("Item.List.Image"),
               listText = list.GetString("Item.List.Text"),
               typeOfMedia = list.GetString("Item.List.TypeOfMedia");

        //string embed = list.GetString("Item.List.Embed");
        //string videoSrc = "https://www.youtube.com/embed/" + videoID;



        <div class="event-display">
          <div class="event-display__inner">
           
            @if (!string.IsNullOrEmpty(listImage)) {
              <div class="event-display__img" style='background-image: url(@listImage)'>
              
                @if(typeOfMedia == "Video") {  
                  <div class="transparent-bg">
                    <button type="button" class="btn video-btn" data-toggle="modal" data-target="#videoPopup_@listID"><i class="fa fa-play" aria-hidden="true"></i> </button>
                  </div>
                }

              </div>
            }
            <div class="event-display__content">@listText</div>

          </div>
          <div class="event-display__arrow"></div>
        </div>

      }
    </div>

    <div class="timeline-wrapper">
      <div class="line"></div>
      <div class="timeline section__slider">
        @foreach(LoopItem listDate in GetLoop("Item.List").Cast<LoopItem>().Reverse()) {
        <div class="timeline-event">
          <div class="timeline-event__icon">
            <i class="vb-clock timeline-event__icon-img"></i>
            <i class="vb-flag timeline-event__icon-img timeline-event__icon-img--active"></i>
          </div>
          <h4 class="timeline-event__date">@listDate.GetString("Item.List.Title")</h4>
        </div>
        }
      </div>
    </div>
    

    @foreach(LoopItem list in GetLoop("Item.List")) {
    string listID = list.GetString("Item.List.Id"),
           typeOfMedia = list.GetString("Item.List.TypeOfMedia");

    string embed = list.GetString("Item.List.Embed");

    
    if(typeOfMedia == "Video") {  
    <div id="videoPopup_@listID" class="modal fade" role="dialog">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-body">
              <button type="button" class="close" data-dismiss="modal">&times;</button>
              <iframe class="youtube-content" width="854" height="480" src="@embed?version=3&amp;enablejsapi=1" frameborder="0" allowfullscreen=""></iframe>

              <script type="text/javascript">
                $(function() {
                  $('#videoPopup_@(listID)').on('hidden.bs.modal', function (e) {
                    // do something...
                    $('#videoPopup_@(listID) iframe.youtube-content').each(function(){
                      this.contentWindow.postMessage('{"event":"command","func":"' + 'stopVideo' + '","args":""}', '*')
                    });
                    //$(' video').attr("src", $("#popup@(listID) video").attr("src"));
                  });
                });
              </script>
          </div>
        </div>
      </div>
    </div>
    }
}


</article>

@helper RenderParagraphAnchor()
{
  if(Convert.ToBoolean(Dynamicweb.Configuration.SystemConfiguration.Instance.GetValue("/Globalsettings/Settings/Performance/DeactivateParagraphAnchor")))
  {
    <a id='@GetString("ParagraphID")' class="pidlink"></a>
  }
}
@helper RenderHeading()
{
  if(GetBoolean("Item.ShowTitle") && GetString("Item.TitleOrder") == "title-first")
  {
	  @RenderHeadingHtml()
  }
}
@helper RenderHeadingHtml()
{
  if (!string.IsNullOrEmpty(GetString("Item.Title")))
  {
    string headingType = string.IsNullOrEmpty(GetString("Item.HeadingType")) ? "h1" : GetString("Item.HeadingType");
    <header class="paragraphHeader">
	  @string.Format("<{0}>{1}</{0}>", headingType, GetString("Item.Title"))
	</header>
  }
}
@helper RenderText()
{
  if(GetString("Item.Order") == "image-left" || GetString("Item.Order") == "image-right")
  {
	@CheckForParagraphWrapper()
    @RenderImageTag()
  }
  if (GetBoolean("Item.ShowTitle") && GetString("Item.TitleOrder") == "title-with-text")
  {
	@CheckForParagraphWrapper()
    @RenderHeadingHtml()
  }
  if (!string.IsNullOrWhiteSpace(GetString("Item.Text")))
  {
	@CheckForParagraphWrapper()
    <div class="paragraphText">
      @GetString("Item.Text")
    </div>
  }
}
@helper RenderModule()
{
  if(!string.IsNullOrEmpty(GetString("ParagraphModule"))){
    @CheckForParagraphWrapper()
    @GetString("ParagraphModule")
  }
}
@helper RenderImage()
{
  string itemOrder = (GetString("Item.Order") == "") ? "image-top" : GetString("Item.Order");
  if(itemOrder == "image-left-column" || itemOrder == "image-right-column" || itemOrder == "image-top")
  {
    @RenderImageTag()
  }
}
@helper RenderImageTag()
{
  if (!string.IsNullOrEmpty(GetString("Item.Image")))
  {
    if (string.IsNullOrEmpty(GetString("Item.Link")))
    {
      @RenderImageWrapper()
    }
    else
    {
      string target = GetBoolean("Item.OpenInANewWindow") ? "target='_blank'" : "";
      <a href="@GetString("Item.Link")" @target>
        @RenderImageWrapper()
      </a>
    }
  }
}
@helper RenderImageWrapper()
{
  string image = System.Web.HttpContext.Current.Server.UrlEncode(GetString("Item.Image"));
  string imageAlt = (!string.IsNullOrEmpty(GetString("Item.ImageTitle"))) ? GetString("Item.ImageTitle") : GetString("Item.Title");
  string figureWidth = "col-xs-" + GetString("Item.ImageWidth");
  string optimizedWidth = "1280";
  string figureClass = "";//GetString("Item.ImageStyle") ;


  switch (GetString("Item.Order")){
    case "image-left":
	case "image-left-column":
      figureWidth += " pull-left noPaddingLeft";
      break;
    case "image-right":
    case "image-right-column":
      figureWidth += " pull-right noPaddingRight";
      break;
    case "image-top":
	default:
      figureWidth += " image-top noPadding";
      if(GetInteger("Item.ImageWidth") < 12){
        figureWidth += " col-xs-offset-" + ((12 - GetInteger("Item.ImageWidth")) / 2);
      }
      break;
  }
  figureClass = (figureClass == "none") ? figureWidth : figureClass + " " + figureWidth;

  if (Dynamicweb.Frontend.PageView.Current().Device.ToString() == Dynamicweb.Frontend.Devices.DeviceType.Mobile.ToString())
  {
    switch (GetString("Item.WidthMobile")){
      case "12":
        optimizedWidth = "480";
        break;
      case "6":
        optimizedWidth = "240";
        break;
    }
  }
  else {
    switch (GetString("Item.Width")){
      case "3":
	  case "4":
	  case "6":
        optimizedWidth = "722";
        break;
      case "8":
	  case "9":
        optimizedWidth = "960";
        break;
      default:
        optimizedWidth = "1280";
        break;
    }
  }
  <figure class="@figureClass">
    <img class="img-responsive" src="/Admin/Public/GetImage.ashx?width=@optimizedWidth&image=@image" title="@imageAlt" alt="@imageAlt" />
  </figure>
}



@Include("../includes/PageTemplates/ItemDetailHelpersRenderButton.cshtml")